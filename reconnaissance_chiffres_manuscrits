from keras.datasets import mnist
from keras.models import Sequential
from keras.layers.core import Dense, Dropout, Activation, Flatten
from keras.layers import Conv2D, MaxPooling2D
from keras.optimizers import SGD
from keras.utils import np_utils
import matplotlib
import matplotlib.pyplot as plt
import scipy
import scipy.ndimage
import numpy as np
from keras import backend as K
import keras
(X_train_base, y_train_base), (X_test_base, y_test_base) = mnist.load_data()

def plot_10_by_10_images(images):    
    fig = plt.figure()
    images = [image[3:25, 3:25] for image in images]
    #image = np.concatenate(image, axis=1)
    for x in range(10):
        for y in range(10):
            ax = fig.add_subplot(10,10,10*y+x+1)
            ax.matshow(images[10*y+x+1], cmap = matplotlib.cm.binary)
            plt.xticks(np.array([]))
            plt.yticks(np.array([]))
    plt.show()
plot_10_by_10_images(X_train_base)

subset = 10000 #size
nb_classes=10
X_train = X_train_base[:subset].reshape(subset, 784) #reshape pour passer d'une matrice à un vecteur
X_test = X_test_base.reshape(subset, 784)
X_train = X_train.astype("float32")#modifier en float 
X_test = X_test.astype("float32")
X_train /= 255 #diviser par 255 car c'est la valeur max que peuvent prendre les pixels
X_test /= 255
y_train = np_utils.to_categorical(y_train_base[:subset], nb_classes)#permet de transformer données numériques en catégories
y_test = np_utils.to_categorical(y_test_base, nb_classes)

print(X_train.shape)

print(X_test.shape)

print(y_train)

model = Sequential()
model.add(Dense(12, input_shape = (784,), activation = 'sigmoid'))
model.add(Dense(12, activation = 'sigmoid'))
model.add(Dropout(0.5))
model.add(Dense(nb_classes, activation ='softmax'))

sgd = SGD(lr = 0.1, decay = 1e-6, momentum = 0.9, nesterov = True)
model.compile(loss = 'categorical_crossentropy', metrics = ['accuracy'], optimizer=sgd)

model.summary()

batch_size = 256
epochs = 20
model.fit(X_train,
          y_train, 
          batch_size = batch_size, 
          epochs=epochs, 
          verbose=1, 
          validation_data=(X_test, y_test))
          
def plot_mnist_digit(image):
    """plot a single MNIST image."""
    fig = plt.figure()
    ax = fig.add_subplot(1 ,1 ,1)
    ax.matshow(image, cmap = matplotlib.cm.binary)
    plt.xticks(np.array([]))
    plt.yticks(np.array([]))
    plt.show()
loss, acc = model.evaluate(X_test, y_test, verbose =0)
index = 800
print("The accuracy on the best set is", (acc*100),"%")
plot_mnist_digit(X_test_base[index])
cl = np.argmax(model.predict_classes(X_test[index].reshape((1,784))),axis=1)


print("Le chiffre reconnu est :", cl[0])
print("Le chiffre à reconnaitre est :", np.argmax(y_test[index]))          

